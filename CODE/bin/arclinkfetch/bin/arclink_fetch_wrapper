#!/bin/bash
#-------------------------------------------------------------------------------
# Aide
#-------------------------------------------------------------------------------
usage ()
{
	cat <<EOF
Usage :	$0 [OPTIONS] CHEMIN
	$0 --help

Fonction :
Ce script sert à contourner un bug (ou limitation) d'arclink ou arclink_fetch qui ne retourne pas de données lorsqu'on demande beaucoup de données lentes, pour une ligne de requête (premier bug) ou pour l'ensemble des lignes (deuxième bug).

	Il interprète le fichier de requêtes passé à arclink_fetch pour en générer une version fractionnée en périodes de temps n'excédant pas le seuil demandé [$JOURS_MAX], générant autant de lignes de requêtes que nécessaire.

	Une première version de ce script se contentait de fractionner le fichier de requête. Mais avec le deuxième bug, les dernières lignes de la requête ne retournaient rien.

	Cette version contourne le deuxième bug : elle fait plusieurs requêtes successives, une pour chaque ligne générée par le fractionnement, en demandant à arclink_fetch d'écrire un fichier temporaire qui est concaténé au contenu miniseed précédemment reçu.
Arguments :
	 [-h|--help] [OPTIONS] -u USER -o OUTPUTFILE [REQUEST]
Exemples :
	$0 -u webobs -a arclinker:18001 -o /tmp/test_arclink_fetch.msd /tmp/req.txt
Options :
	-h, -help, --help		Affiche cette aide
	-m MAX, --max MAX		Seuil maximum de jours de requête
	-*, --*=*, --* * Passe des options à arclink_fetch
Dernière modification : <15 oct. 2018 14:38:10 Alexis Bosson>
EOF
}

#-------------------------------------------------------------------------------
# Valeurs par défaut
#-------------------------------------------------------------------------------
# Nombre maximum de jours d'une requête
JOURS_MAX=100
# Par défaut, lit l'entrée standard comme fichier de requête (comme arclink_fetch)
FICHIER_REQ=/dev/stdin
export PATH=$PATH:$(dirname "$0")

#-------------------------------------------------------------------------------
# Conversion d'une date arclink en timestamp
#-------------------------------------------------------------------------------
date2ts ()
{
	date=$1
	date -d "$(echo $date|sed 's/^\([0-9]\+\),\([0-9]\+\),\([0-9]\+\),\([0-9]\+\),\([0-9]\+\),\([0-9]\+\)/\1-\2-\3 \4:\5:\6 UTC/')" +%s
}

#-------------------------------------------------------------------------------
# Conversion d'un timestamp en date arclink
#-------------------------------------------------------------------------------
ts2date ()
{
	ts=$1
	date -d "@$ts" -u "+%Y,%m,%d,%H,%M,%S"
}

#-------------------------------------------------------------------------------
# Fractionnement d'une ligne de requête arclink
#-------------------------------------------------------------------------------
fractionnement_ligne()
{
	# Extraction des champs de la ligne de requête : dates et reste de la ligne
	ligne="$1"
	date_deb="$(echo "$ligne"|gawk '{print $1}')"
	date_fin="$(echo "$ligne"|gawk '{print $2}')"
	reste="$(echo "$ligne"|gawk '{$1=$2="";print}')"
	# Calcul des timestamps correspondant aux dates
	ts_deb=$(date2ts $date_deb)
	ts_fin=$(date2ts $date_fin)
	# Différence maximale de timestamp (période la plus longue d'interrogation)
	dts_max=$(($JOURS_MAX*86400))
	# Tant que la date de fin n'est pas en vue de la période maximale depuis la date de début
	while [ $(($ts_fin-$ts_deb)) -gt $dts_max ]
	do
		# Calcul d'une date intermédiaire : date précédente + période maximale
		ts_int=$(($ts_deb+$dts_max))
		date_int=$(ts2date $ts_int)
		# Génération d'une ligne de requête intermédiaire
		echo "$date_deb $date_int $reste"
		# Incrémentation de la date de début à la date intermédiaire
		ts_deb=$ts_int
		date_deb=$(ts2date $ts_deb)
	done
	# La date de fin n'est plus trop loin, on affiche la période restante
	echo "$date_deb $date_fin $reste"
}

################################################################################
# Programme principal
################################################################################

# Traitement des options
while [ $# -ge 1 ]
do
	case $1 in
		(-h|-help|--help) usage ; exit 0 ;;
		# Seul argument de ce script : nombre max de jours
		(-m|--max) shift ; JOURS_MAX="$1" ;;
		# Récupération du nom du fichier de sortie
		(-o|--output-file) OUTPUT_FILE="$2" ; shift ;;
		(--output-file=*) OUTPUT_FILE="${1#*=}" ; shift ;;
		# Passage des autres arguments à arclink_fetch
		(-l|-n|-g|-p|-v|-q|--longhelp|--no-resp-dict|--rebuild-volume|--proxy|--password-file=*|--address=*|--request-format=*|--data-format=*|--preferred-sample-rate=*|--label=*|--timeout=*|--retries=*|--user=*) ARGS="$ARGS $1" ;;
		(-w|-a|-f|-k|-s|-L|-t|-x|-u|--password-file|--address|--request-format|--data-format|--preferred-sample-rate|--label|--timeout|--retries|--user) ARGS="$ARGS $1 $2" ; shift ;;
		(-*) echo "Option inconnue : [$1]" ; usage ; exit 1 ;;
		(*) FICHIER_REQ="$1"
	esac
	shift
done

# Lecture du fichier de requête (fonctionne avec /dev/stdin)
requete=$(cat "$FICHIER_REQ")

# Fichier temporaire dans lequel arclink_fetch écrira à chaque itération, qui sera concaténé pour former le fichier demandé
TMP_OUTPUT=$OUTPUT_FILE.tmp

# Le fichier de sortie demandé est vide au départ
:>$OUTPUT_FILE

# Traitement du fichier
while read
do
	ligne="$REPLY"
	requete_fractionnee_ligne="$(fractionnement_ligne "$ligne")"
	while read
	do
		ligne_fractionnee="$REPLY"
		# Exécution de la requête arclink sur la ligne fractionnée
		echo "Requête arclink avec la ligne [$ligne_fractionnee]"
		# Avec la version 1.2.1 installée dans Webobs, l'argument REQUEST est obligatoire, d'où le /dev/stdin, inutile en version 1.2.8
		echo "$ligne_fractionnee" | arclink_fetch $ARGS -o $TMP_OUTPUT /dev/stdin
		# Copie du fichier miniseed temporaire dans celui demandé
		cat $TMP_OUTPUT >> $OUTPUT_FILE
	done <<< "$requete_fractionnee_ligne"
done <<< "$requete"

# Effacement du fichier temporaire
rm $TMP_OUTPUT
