#!/bin/bash
#	Script: gnss_run_gipsyx
#
#	Dependencies:
#	   - teqc (3rd party binary www.unavco.org, must be in $PATH)
#	   - raw2rinex (WebObs script located in the same directory)
#	   - download_orbit (WebObs script located in the same directory)
#	   - the list of stations to process can be set in the .rc using NODES
#	     variable, or, using a local WebObs proc for node's list with FID
#	     parameter as station/marker code name for each node. Optionally,
#	     each node might contain the parameters (will overwrite Rinex header):
#		      FID_RECEIVER: receiver code name
#		       FID_ANTENNA: antenna code name
#	   - a station.info Gamit file can be added to overwrite Rinex headers
#	     with receiver/antenna codes (set STATION_INFO variable in .rc);
#	     needs stationinfo2json (WebObs script) and jq (JSON processor).
#	   - a directory of sitelogs can be added to overwrite Rinex headers with
#	     receiver/antenna/approx. position metadata (set SITELOG variable in
#	     .rc); needs sitelog2json (WebObs script) and jq (JSON processor).
#
#	For all other parameters see the gnss_run_gipsyx.rc template.
#
# Authors: Fran√ßois BEAUDUCEL, Edgar LENHOF, Patrice BOISSIER
#
# Created: 2019-02-11 at PVMBG, Bandung (Indonesia)
#          Based on Gipsy-Oasis version by Francois BEAUDUCEL (IPGP) and Ahmad Ali FAHMI (IRD),
#          Domerapi/WebObs Project, 2014.
# Updated: 2022-09-22
#
# **** Updates
# ** 2023-06-xx Pierre Sakic 
# - Handles Non Fiducial Orbits + associated Helmert transfo. with NFORB=1
#
# ** 2023-08-07 Pierre Sakic 
# - Handles RINEX3
# - custom temp. directory possible with $TMPDIRMAIN 
# - Trivia note: flinn stands for
#   Fiducial Laboratories for an International Natural sciences Network (FLINN)
#   JPL's GPS analysis was initially its contribution to the FLINN
#   (Zumberge et al. 1994, https://hdl.handle.net/hdl:2014/32449)
#



#Check lock file
LOCKFILE=/tmp/gnss_run_gipsyx.txt
if [ -e ${LOCKFILE} ] && kill -0 `cat ${LOCKFILE}`; then
	echo "already running"
	exit
fi

# Helper
if [ $# -lt 2 ]; then
	echo "      Syntax: gnss_run_gipsyx CONF DAYS [options]"
	echo " Description: runs the automatic GNSS process from raw files to position solution"
	echo "   Arguments:"
	echo "       CONF = configuration filename, e.g., /etc/webobs.d/gnss_run_gipsyx.rc"
	echo "       DAYS = number of days to process (from today)"
	echo "     Options:"
	echo "       -s \"STA1 STA2...\""
	echo "            station code or station list with double quotes"
	echo "	           default is all nodes associated with local WebObs $GRID proc name"
	echo "            or a list of nodes $NODES defined in .rc"
	echo "       -d \"yyyy/mm/dd,yyyy/mm/dd\""
	echo "            choose days to start process; the DAYS argument can still be used to"
	echo "            process previous days from the selected ones, for instance:"
	echo "            gnss_run_gipsyx CONF 1 -d 2017/03/17,2018/08/05"
	echo "            will compute  2017/03/17, 2017/03/16, 2018/08/05 and 2018/08/04"
	echo "       -final, -rapid, -ultra"
	echo "            use only final, rapid or ultra orbit"
	echo "       -force"
	echo "            forces the process despite existence of final results"
	echo "       -lock"
	echo "            creates a lock file to prevent multiple process of gnss_run_gipsyx"
	echo "       -debug"
	echo "            verbose mode"
	echo ""
	exit 0;
fi

# reads parameters from bash configuration script
# variables that must be set: $GRID $FROM $DEST $GIPSYOPTIONS $TEQCOPTIONS
source "$1" || {
  echo "cannot read configuration file $1. Abort".
  exit 1
}

### ------- temporary directory 
# the main tmp dir can be customized,
# working in the default /tmp can be tricky especially for big repro
if [ -z $TMPDIRMAIN ] || [ ! -d  $TMPDIRMAIN ]; then
        if [ ! -d  $TMPDIRMAIN ]; then
		echo "WARN: given main temp dir $TMPDIRMAIN does not exists, defaut /tmp will be used"
	fi
        TMPDIRMAIN="/tmp/"
fi

# TMPDIRMAIN must be an environnement var because raw2rinex needs it too
export TMPDIRMAIN=$TMPDIRMAIN 

tmpdir=$(mktemp -d $TMPDIRMAIN/gipsyx.XXXXXXXXXX)
rinex="$tmpdir/rinex"

PWD=$(pwd)
PROGDIR=$( cd "$( dirname "$0" )" && pwd )

ORBITS=( "flinn" "ql" "ultra" )

# gets the nodes list from WebObs (will erase $NODES)
if [ "$GRID" != "" ]; then
	# PROC is local directory containing nodes .cnf
	if [ -d "$NODEROOT" ]; then
		PROC="$NODEROOT/"
	else
		PROC="/etc/webobs.d/GRIDS2NODES/$GRID."
	fi
	# node's list defined from the FID parameter in .cnf
	NODES=$(grep -h "^$GRID\.FID|" $PROC*/*.cnf|sed -E "s/.*FID\|//")
	NODESTABLE=$(grep -H "^$GRID\.FID|" $PROC*/*.cnf|sed -E "s/.*\///"|sed -E "s/\.cnf:.*FID\|/\ /")
fi

if [ -z "$FMT" ]; then
	FMT='$FROM/$FID/$yyyy/$mm/$dd'
fi

TODAY=$(date -u +"%Y/%m/%d")
DAYS=$2
DAYLIST=$(for d in $(seq $DAYS -1 0);do date -u -d "$d day ago" +"%Y/%m/%d";done)

LOG=gd2e.log

# boolean for forcing process (default value doesn't force)
FORCE=0

if [ -z "$ERROR_REGEX_RINEX" ]; then
	ERROR_REGEX_RINEX="REC #|ANT #|# / TYPES OF OBSERV|MARKER NAME"
fi


# do not use non fiducial (NF) orbits per default
#
# NFORB is the "frontend" boolean set by the user
# NFORBLOOP is modified for each day/site loop step
# because non fiducial is only possible for Final
if [ -z "$NFORB" ]; then
	NFORB=0 
fi


echo "*** GipsyX / WebObs $GRID GNSS File Processing ***"

# Optional parameters
for (( i=1; i<=$#; i++)); do
	case ${!i} in
	-final)
		ORBITS=( "flinn" )
		echo "Will use only final orbit"
		;;
	-rapid)
		ORBITS=( "ql" )
		echo "Will use only rapid orbit"
		;;
	-ultra)
		ORBITS=( "ultra" )
		echo "Will use only ultra orbit"
		;;
   	-force)
      		FORCE=1
      		echo "Force computation despites final orbits already exist"
		;;
   	-debug)
      		DEBUG=1
		export VERBOSE=Y
      		echo "Debug mode: temporary directories will NOT be deleted!"
		;;
   	-s)
      		j=$((i+1))
      		IFS=' ' read -ra arrayStation <<< "${!j}"
      		NODES=${arrayStation[@]}
		;;
	-d)
      		k=$((i+1))
      		IFS=',' read -ra arrayDay <<< "${!k}"
      		STARTDAYS=${arrayDay[@]}
      		DAYLIST= $()
      		for start in $STARTDAYS;do
      			L=$(for d in $(seq $DAYS -1 0);do date -d "$d day ago $start" +%Y/%m/%d;done)
         		DAYLIST=("${DAYLIST[@]}" "${L[@]}")
      		done
      		DAYLIST=($(printf "%s\n" "${DAYLIST[@]}" | sort -u | tr '\n' ' '))
      		DAYLIST=${DAYLIST[@]} #converting to proper format
		;;
	-lock)
		# make sure the lockfile is removed when we exit and then claim it
		trap "rm -f ${LOCKFILE}; exit" INT TERM EXIT
		echo $$ > ${LOCKFILE}
	esac
done


for station in $NODES; do
	# cleans the string !
	FID=${station//[$'\t\r\n ']}
	echo ""
	echo "*** Processing files from station $FID for the last $DAYS days"

	# looks in node's parameters for possible antenna and receiver (will overwrite rinex header)
	if [ "$GRID" != "" ]; then
		ID=$(echo "$NODESTABLE" | awk "/$FID/ {print \$1}")
		receiver=$(grep -h "^$GRID\.FID_RECEIVER|" $PROC$ID/$ID.cnf|sed -E "s/.*FID_RECEIVER\|//"|tr -d '\r')
		antenna=$(grep -h "^$GRID\.FID_ANTENNA|" $PROC$ID/$ID.cnf|sed -E "s/.*FID_ANTENNA\|//"|tr -d '\r')
		echo "   WO ID = $ID - receiver = '$receiver' - antenna = '$antenna' (will use rinex header if empty)"
		if [ ! -z "$receiver" ]; then
			receiver=" -O.rt \"$receiver\""
		fi
		if [ ! -z "$antenna" ]; then
			antenna=" -O.at \"$antenna\""
		fi
	fi

	for ymd in $DAYLIST; do

		doy=$(date -d "$ymd" +"%j")
		sta=$(echo $FID | tr '[:upper:]' '[:lower:]')
		yyyy=${ymd:0:4}
		year=$yyyy
		yy=${ymd:2:2}
		mm=${ymd:5:2}
		dd=${ymd:8:2}
		bb=$(date -d "$ymd" +"%b")
		rinex="$tmpdir/${sta}${doy}0.${yy}o"

		# uses station.info to overwrite rinex header
		if [[ "$STATION_INFO" != "" && -s "$STATION_INFO" ]]; then
			receiver=$($PROGDIR/stationinfo2json "$STATION_INFO" $FID $yyyy-$doy|jq '.rt' | tr -d '"')
			antenna=$($PROGDIR/stationinfo2json "$STATION_INFO" $FID $yyyy-$doy|jq '.at' | tr -d '"')
			alertheader="   station.info: $FID @ $yyyy-$doy - receiver = '$receiver' - antenna = '$antenna' (will use rinex header if empty)"
			if [ ! -z "$receiver" ]; then
				receiver=" -O.rt \"$receiver\""
			fi
			if [ ! -z "$antenna" ]; then
				antenna=" -O.at \"$antenna\""
			fi
		else
			alertheader=''
		fi

		# uses sitelogs to overwrite rinex header
		if [[ "$SITELOG" != "" ]]; then
			receiver=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.rt' | tr -d '"')
			antenna=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.at' | tr -d '"')
			posxyz=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.px' | tr -d '"')
			alertheader="   sitelog: $FID @ $ymd - receiver = '$receiver' - antenna = '$antenna' (will use rinex header if empty)"
			if [ ! -z "$receiver" ]; then
				receiver=" -O.rt \"$receiver\""
			fi
			if [ ! -z "$antenna" ]; then
				antenna=" -O.at \"$antenna\""
			fi
			if [ ! -z "$posxyz" ]; then
				posxyz=" -O.px $posxyz"
			fi
		else
			alertheader=''
		fi

		# setting paths
		res="$DEST/$FID/$yyyy/$yyyy-$mm-$dd.$FID"
		gipsyres="$res.tdp"
		gipsycov="$res.gdcov"
		gipsylog="$res.log"

		if [[ $FORCE == 0 && -s "$gipsyres" ]]; then
			echo "   file $gipsyres [flinn] already exists..."
		else
			# path of raw data: eval() will replace any variables in $FMT (from .rc)
			RAW=$(eval "echo $FMT")
			if [ ! -z "$(ls -Ad $RAW 2>/dev/null)" ]; then
				echo "$alertheader"
				rm -rf $tmpdir/*
				# makes Rinex daily file from raw data (see raw2rinex script)
				$PROGDIR/raw2rinex "$RAW" $rinex $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz
				if [[ ! -z $VERBOSE || $? != 0 ]]; then
					echo "   $PROGDIR/raw2rinex \"$RAW\" $rinex $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz"
				fi

				# real-time case: makes a 24h window from yesterday+today data
				if [[ "$REALTIME" == "Y" && "$ymd" == "$TODAY" ]]; then

					rinex1=$tmpdir/rinex1 # 2 days ago
					rinex2=$tmpdir/rinex2 # yesterday
					rinex3=$tmpdir/rinex3 # today

					ORBITS=( "ultra" ) #reaffect orbit value because only ultra can be used for realtime

					yesterday=$(date -u -d "1 day ago" +"%Y/%m/%d")
					two_days_ago=$(date -u -d "2 day ago" +"%Y/%m/%d")
					echo "   Real-time case: Appending $two_days_ago, $yesterday and $TODAY to process 30h of data."

					# converting yesterday rinex
              			doy=$(date -d "$yesterday" +"%j")
              			yyyy=${yesterday:0:4}
              			mm=${yesterday:5:2}
              			dd=${yesterday:8:2}
              			RAW2=$(eval "echo $FMT")
					echo "$RAW2"
					$PROGDIR/raw2rinex "$RAW2" $rinex2 $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz
					if [[ ! -z $VERBOSE || $? != 0 ]]; then
						echo "$PROGDIR/raw2rinex \"$RAW2\" $rinex2 $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz"
					fi

					#converting 2 days ago rinex
		         		doy=$(date -d "$two_days_ago" +"%j")
              			yyyy=${two_days_ago:0:4}
              			mm=${two_days_ago:5:2}
              			dd=${two_days_ago:8:2}
              			RAW1=$(eval "echo $FMT")
					echo "$RAW1"
              			$PROGDIR/raw2rinex "$RAW1" $rinex1 $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz
              			if [[ ! -z $VERBOSE || $? != 0 ]]; then
       					echo "$PROGDIR/raw2rinex \"$RAW1\" $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $antenna $posxyz"
       				fi

					mv $rinex $rinex3 #already converted rinex for today
					if [[ ! -z $VERBOSE || $? != 0 ]]; then
						echo "   mv $rinex $rinex2"
					fi

					endwindow=$(date -u -d "$DATA_DELAY ago" +"%Y%m%d%H%M%S")
					teqc -phc +quiet -e $endwindow -dh 30 $rinex1 $rinex2 $rinex3 > $rinex
					if [[ ! -z $VERBOSE || $? != 0 ]]; then
						echo "   teqc -phc +quiet -e $endwindow -dh 30 $rinex1 $rinex2 $rinex3 > $rinex"
					fi
				fi

				# makes GipsyX processing
				tdp="$tmpdir/smoothFinal.tdp"
				cd $tmpdir

				# makes a loop for different orbits precision: from Final to Ultra
				for orbit in "${ORBITS[@]}" ; do
					if [[ $orbit == "ql" && -s $gipsyres.$orbit && $FORCE == 0 ]]; then
						echo "   file $gipsyres [$orbit] already exists..."
						break
					else
						NFORBLOOP=0 ### we force the standard case here (fiducial orbits)
						if [ "$ORBITSDIR" != "" ]; then #running Gipsy from local orbit
							case $orbit in
							flinn)
								product="Final"
								NFORBLOOP=$NFORB
								;;
							ql)
								product="Rapid";;
								#product="Rapid_GE";;
							ultra)
							product="Ultra";;
							esac

							# calling download_orbit
							$PROGDIR/download_orbit 0 $ORBITSDIR -o $product -d $ymd $DOWNLOAD_OPTIONS

							if [ -e "$ORBITSDIR/$product/$yyyy/$yyyy-$mm-$dd.eo.gz" ]; then
								ORBITOK=1
							else
								ORBITOK=""
								continue # if download not successfull go to next orbit
							fi
							ORBITOPT="$ORBITSDIR/$product"

						else #running Gipsy from direct download
							ORBITOPT=$orbit
						fi
						
						# if we use NF orbits, add the necessary options -prodTypeGNSS nf -gdCov
						if [ $NFORBLOOP -eq 1 ]; then
							NFORBOPTIONS="-prodTypeGNSS nf -gdCov" 
						else
							NFORBOPTIONS="" 
						fi

						cmd="gd2e.py -rnxFile $rinex -GNSSproducts $ORBITOPT $GIPSYOPTIONS $NFORBOPTIONS"
						echo "   $cmd"
						if [ -z $DEBUG ]; then
							eval "$cmd > $LOG 2>&1"
						else
							eval $cmd
						fi
						rc=$?
						if [[ $rc == 0 && -s $tdp ]]; then
							mkdir -p "$DEST/$FID/$year"
							rm -f $gipsyres.*
							### handle non-fiducial orbits: a further transformation has to be applied
							if [ $NFORBLOOP -eq 1 ]; then
								#cp -v $cov $gipsycov #### copy the gdcov from temp > final dir, for debug only 
							       	trsprm="$ORBITSDIR/$product/$yyyy/$yyyy-$mm-$dd.x.gz"
							        cmdtrans="netApply.py -t -r -s -i $cov -o ${cov}_trs -x $trsprm"
								echo "   $cmdtrans"
								if [ -z $DEBUG ]; then
									eval "$cmdtrans > $LOG 2>&1"
								else
									eval $cmdtrans
								fi
							fi

							if [ $NFORBLOOP -eq 0 ]; then
								### Fiducial orbit (standard case)
								grep "\.State\.Pos\.[XYZ]" $tdp | tail -n3 > $gipsyres
							else
								### Non Fiducial orbit, a conversion gdcov > tdp must be done 
								# this one-liner 
								# 1) get the coordinates
								# 2) 1st awk to reorder the fields
								# 3) 2nd awk to format the fields (issue when trying to  merge both awk)
								# 4) Substitute the label field and customize it. NFtrs => Non Fiducial transformed, WebObs internal custom code
								grep ".STA.[XYZ]" ${cov}_trs | awk '{print $3,0,$4,$5,".Station."$2}' | awk '{printf "%9d %+22.15e %+22.15e %+22.15e %s\n",$1,$2,$3,$4,$5}' | sed 's/.STA./.State.Pos.NFtrs./g' > $gipsyres
							fi

							if [ ! -z $TROP_TDP ]; then
								grep "\.Trop\." $tdp >> $gipsyres
							fi
							echo "==> $gipsyres [$orbit] written."
							if [[ "$orbit" != "flinn" ]]; then
								mv $gipsyres $gipsyres.$orbit
							fi
							break
						else
							echo "   $cmd"
                                                	if [[ -z $ORBITOK && "$orbit" != "ultra" ]]; then
								echo "   ** WARNING: Problem to process gd2e... May be orbit $orbit not yet available?"
							else
								echo "   ** ERROR: Problem to process gd2e... Please check logs."
                                                		grep -E "$ERROR_REGEX_RINEX" $rinex
								ERROR=1
								break
							fi
						fi
					fi
				done
				if [[ -z $ERROR && -e $LOG ]]; then
					mv -f $LOG $gipsylog
					gzip -f $gipsylog
				fi
			else
				echo "   no data to process in $RAW."
			fi
		fi
	done
done

echo "*************************************"

if [ -z $DEBUG ]; then
	rm -rf $tmpdir
fi

rm -f ${LOCKFILE}
