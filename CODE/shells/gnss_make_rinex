#!/bin/bash
#	Script: gnss_make_rinex
#
#	Dependencies:
#	   - teqc (3rd party binary www.unavco.org, must be in $PATH)
#	   - raw2rinex (WebObs script located in the same directory)
#	   - the list of stations to process can be set in the .rc using NODES
#	     variable, or, using a local WebObs proc for node's list with FID
#	     parameter as station/marker code name for each node. Optionally,
#	     each node might contain the parameters (will overwrite Rinex header):
#		      FID_RECEIVER: receiver code name
#		       FID_ANTENNA: antenna code name
#	   - a station.info Gamit file can be added to overwrite Rinex headers
#	     with receiver/antenna codes (set STATION_INFO variable in .rc);
#	     needs stationinfo2json (WebObs script) and jq (JSON processor).
#	   - a directory of sitelogs can be added to overwrite Rinex headers with
#	     receiver/antenna/approx. position metadata (set SITELOG variable in
#	     .rc); needs sitelog2json (WebObs script) and jq (JSON processor).
#
#	For all other parameters see the gnss_make_rinex.rc template.
#
# Authors: Baptiste Camus François BEAUDUCEL, Edgar LENHOF, Patrice BOISSIER
#
# Created: 2022-03-20 at IRD,ISTERRE Chambéry (France)
#          inspired by gnss_run_gipsyx by François BEAUDUCEL, Edgar LENHOF, Patrice BOISSIER (IPGP)
#          Domerapi/WebObs Project, 2014.
# Updated: 2021-10-12

# Helper
if [ $# -lt 2 ]; then
	echo "      Syntax: gnss_make_rinex CONF DAYS [options]"
	echo " Description: runs the automatic GNSS process from raw files to position solution"
	echo "   Arguments:"
	echo "       CONF = configuration filename, e.g., /etc/webobs.d/gnss_make_rinex.rc"
	echo "       DAYS = number of days to process (from today)"
	echo "     Options:"
	echo "	      -s \"STA1 STA2...\""
	echo "            station code or station list with double quotes"
	echo "	           default is all nodes associated with local WebObs $GRID proc name"
	echo "            or a list of nodes $NODES defined in .rc"
	echo "       -d \"yyyy/mm/dd,yyyy/mm/dd\""
	echo "            choose days to start process; the DAYS argument can still be used to"
	echo "            process previous days from the selected ones, for instance:"
	echo "            gnss_make_rinex CONF 1 -d 2017/03/17,2018/08/05"
	echo "            will compute  2017/03/17, 2017/03/16, 2018/08/05 and 2018/08/04"
	echo "		 -i GRID/SITELOG/STATION_INFO"
	echo "       -debug"
	echo "            verbose mode"
	echo ""
	exit 0;
fi

# reads parameters from bash configuration script
# variables that must be set: $GRID $FROM $DEST $TEQCOPTIONS
source "$1" || {
  echo "cannot read configuration file $1. Abort".
  exit 1
}

PWD=$(pwd)
PROGDIR=$( cd "$( dirname "$0" )" && pwd )

# gets the nodes list from WebObs (will erase $NODES)
 if [[ "$GRID" != "" && -z $NODES ]]; then
 	# PROC is local directory containing nodes .cnf
 	if [ -d "$NODEROOT" ]; then
 		PROC="$NODEROOT/"
 	else
 		PROC="/etc/webobs.d/GRIDS2NODES/$GRID."
	 fi
 	# node's list defined from the FID parameter in .cnf
	NODES=$(grep -h "^$GRID\.FID|" $PROC*/*.cnf|sed -E "s/.*FID\|//")
	NODESTABLE=$(grep -H "^$GRID\.FID|" $PROC*/*.cnf|sed -E "s/.*\///"|sed -E "s/\.cnf:.*FID\|/\ /")
fi

if [ -z "$FMT" ]; then
	FMT='$FROM/$FID/$yyyy/$mm/$dd'
fi

TODAY=$(date -u +"%Y/%m/%d")
DAYS=$2
DAYLIST=$(for d in $(seq $DAYS -1 0);do date -u -d "$d day ago" +"%Y/%m/%d";done)

echo "*** Rinex maker / WebObs $GRID GNSS File Processing ***"

# Optional parameters
for (( i=1; i<=$#; i++)); do
	case ${!i} in
   	-debug)
			VERBOSE=1
      		echo "Debug mode : processing with verbose log" 
		;;
	-d)
      		k=$((i+1))
      		IFS=',' read -ra arrayDay <<< "${!k}"
      		STARTDAYS=${arrayDay[@]}
      		DAYLIST= $()
      		for start in $STARTDAYS;do
      			L=$(for d in $(seq $DAYS -1 0);do date -d "$d day ago $start" +%Y/%m/%d;done)
         		DAYLIST=("${DAYLIST[@]}" "${L[@]}")
      		done
      		DAYLIST=($(printf "%s\n" "${DAYLIST[@]}" | sort -u | tr '\n' ' '))
      		DAYLIST=${DAYLIST[@]} #converting to proper format
        ;;
   	-i)
      	    l=$((i+1))
            INFOSRC=${!l}
            echo "   Generating rinex with headers informations based on "$INFOSRC" files"
		;;	
   	-s)
      		j=$((i+1))
      		IFS=' ' read -ra arrayStation <<< "${!j}"
      		NODES=${arrayStation[@]}
	esac
done

for station in $NODES; do
	# cleans the string !
	FID=${station//[$'\t\r\n ']}
	echo ""
	echo "*** Processing files from station $FID for the last $DAYS days"

	
	for ymd in $DAYLIST; do

		doy=$(date -d "$ymd" +"%j")
		sta=$(echo $FID | tr '[:upper:]' '[:lower:]')
		yyyy=${ymd:0:4}
		year=$yyyy
		mm=${ymd:5:2}
		dd=${ymd:8:2}

        DAYLYMSG="$FID $ymd -"

        # setting results paths
		RINEX="$DEST/GNSS/rinex/30s/$FID/$yyyy"

        # path of raw data: eval() will replace any variables in $FMT (from .rc)
		RAW=$(eval "echo $FMT")

		if [[ ! -z "$(ls -Ad $RAW 2>/dev/null)" && ! -z "$(find $RAW -type f)" ]]; then

            case $INFOSRC in
            WEBOBS)
                    # use node's parameters to overwrite rinex header
                    if [[ "$GRID" != "" && "$NODEROOT" != "" ]]; then
             		    ID=$(echo "$NODESTABLE" | awk "/$FID/ {print \$1}")
                		receiver=$(grep -h "^FID_RECEIVER|" $PROC$ID/$ID.cnf|sed -E "s/.*FID_RECEIVER\|//"|tr -d '\r')
                		anttype=$(grep -h "^FID_ANTENNA|" $PROC$ID/$ID.cnf|sed -E "s/.*FID_ANTENNA\|//"|tr -d '\r')
                		alertheader="   $DAYLYMSG WO ID = $ID - receiver = '$receiver' - antenna = '$anttype' (will use rinex header if empty)"
                    else
                        echo "   $DAYLYMSG   !!! Warning !!!   Webobs site information : GRID or NODEROOT is empty in .rc file."
                    fi
                ;;
            STATION_INFO)
                    # uses station.info to overwrite rinex header
                    if [[ "$STATION_INFO" != "" && -s "$STATION_INFO" ]]; then
            			receiver=$($PROGDIR/stationinfo2json "$STATION_INFO" $FID $yyyy-$doy|jq '.rt' | tr -d '"')
    	        		anttype=$($PROGDIR/stationinfo2json "$STATION_INFO" $FID $yyyy-$doy|jq '.at' | tr -d '"')
    	        		alertheader="   $DAYLYMSG station.info: $doy - receiver = '$receiver' - antenna = '$anttype' (will use rinex header if empty)"
                    else
                        echo "   $DAYLYMSG   !!! Warning !!!   station.info : STATION_INFO is empty in .rc file. "
                    fi
                ;;
            SITELOG)
                    # uses sitelogs to overwrite rinex header
                    if [[ "$SITELOG" != "" ]]; then
            			receiver=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.rt' | tr -d '"')
    		        	anttype=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.at' | tr -d '"')
            			antnum=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.an' | tr -d '"')
            			posxyz=$($PROGDIR/sitelog2json "$SITELOG" $FID $ymd|jq '.px' | tr -d '"')
            			alertheader="   $DAYLYMSG sitelog: receiver = '$receiver' - antenna type = '$anttype' - antenna s/n = '$antnum' (will use rinex header if empty)"
                    else
                        echo "   $DAYLYMSG   !!! Warning !!!   sitelog : SITELOG is empty in .rc file !!!"
                    fi    
            esac

            if [[ ! -z "$receiver$anttype$antnum$posxyz" ]]; then
                echo "$alertheader"
                # transform site imformation in teqc option
        		if [ ! -z "$receiver" ]; then
        	    	receiver=" -O.rt \"$receiver\""
        		fi
        		if [ ! -z "$anttype" ]; then
        			anttype=" -O.at \"$anttype\""
        		fi
             	if [ ! -z "$antnum" ]; then
        			antnum=" -O.an \"$antnum\""
        		fi
        		if [ ! -z "$posxyz" ]; then
        			posxyz=" -O.px $posxyz"
        		fi
            else
                echo "   $DAYLYMSG No site informations fond in $INFOSRC, Rinex will be generated whithout overwriting headers if empty"
            fi

			# makes Rinex daily file from raw data (see raw2rinex script)
			mkdir -p $RINEX
			$PROGDIR/raw2rinex "$RAW" $RINEX $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $anttype $antnum $posxyz
			if [[ ! -z $VERBOSE || $? != 0 ]]; then
				echo "   $PROGDIR/raw2rinex \"$RAW\" $RINEX $TEQCOPTIONS -O.mn \"$FID\" -O.mo \"$FID\" $receiver $anttype $antnum $posxyz"
			fi
		else
			echo "   $DAYLYMSG no data to process in $RAW."
		fi
	done
done

echo "*************************************"
