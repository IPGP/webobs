#!/bin/bash
#	Script: gnss_run_gipsyx
#
#	Dependencies:
#		- teqc (3rd party binary www.unavco.org, must be in $PATH)
#		- mkrinex (WebObs script located in the same directory)
#		- a WebObs grid for node's list and parameters (defined in
#		  the configuration file) that must be defined for each node:
#		               FID: station/marker code name
#		      FID_RECEIVER: receiver code name
#		       FID_ANTENNA: antenna code name
#
# 
# Authors: Francois BEAUDUCEL (IPGP), Ahmad Ali FAHMI (IRD)
#          Domerapi/WebObs Project
# Created: 2014-01-29 at BPPTKG, Yogyakarta (Indonesia) for Gipsy-Oasis version
# Created: 2019-02-11 at PVMBG, Bandung (Indonesia) for GipsyX version
# Updated: 2019-04-12

if [ $# -lt 2 ]; then
	echo "       Syntax: gnss_run_gipsyx CONF DAYS [STATION] [-force]"
	echo "  Description: runs the automatic GNSS process from raw files to position solution"
	echo "    Arguments:"
	echo "           CONF = configuration filename, e.g., /etc/webobs.d/gnss_run_gipsyx.rc"
	echo "           DAYS = number of days to process (from today)"
	echo "        STATION = station code or station list with double quotes (default = all nodes associated with $GRID)"
	echo "         -force = forces the process despite existence of final results"
	echo ""
	exit 0;
fi

# reads parameters from bash configuration script
# variables that must be set: $GRID $FROM $DEST $GIPSYOPTIONS $TEQCOPTIONS
source "$1" || {
  echo "cannot read configuration file $1. Abort".
  exit 1
}

tmpdir=$(mktemp -d /tmp/gipsyx.XXXXXXXXXX)

PWD=$(pwd)
PROGDIR=$( cd "$( dirname "$0" )" && pwd )

ORBITS=( "flinn" "ql" "ultra" )

# gets the nodes parameters from WebObs
PROC="/etc/webobs.d/GRIDS2NODES/$GRID"
NODES=$(grep -h ".*FID|" $PROC.*/*.cnf|sed -E "s/.*FID\|//")
NODESTABLE=$(grep -H "^.*FID|" $PROC.*/*.cnf|sed -E "s/.*\///"|sed -E "s/\.cnf:.*FID\|/\ /")

DAYS=$2
DAYLIST=$(for d in $(seq $DAYS -1 0);do date -d "$d day ago" +%Y/%m/%d;done)

if [ "$3" != "" ]
then
	NODES="$3"
fi

if [ "$4" == "-force" ]
then
	FORCE=1
else
	FORCE=0
fi

echo "*** GipsyX / WebObs $GRID GNSS File Processing ***"

for station in $NODES; do
	# cleans the string !
	sta=${station//[$'\t\r\n ']}
	echo "*** Processing files from station $sta for the last $DAYS days"

	# looks in node's parameters for possible antenna and receiver (will overwrite rinex header)
	ID=$(echo "$NODESTABLE" | awk "/$sta/ {print \$1}")
	receiver=$(grep -h "FID_RECEIVER|" $PROC.$ID/$ID.cnf|sed -E "s/.*FID_RECEIVER\|//"|tr -d '\r')
	antenna=$(grep -h "FID_ANTENNA|" $PROC.$ID/$ID.cnf|sed -E "s/.*FID_ANTENNA\|//"|tr -d '\r')
	echo "ID = $ID - receiver = '$receiver' - antenna = '$antenna'"
	if [ ! -z "$receiver" ]; then
		receiver=" -O.rt \"$receiver\""
	fi
	if [ ! -z "$antenna" ]; then
		antenna=" -O.at \"$antenna\""
	fi

	for ymd in $DAYLIST; do
		year=${ymd:0:4}
		month=${ymd:5:2}
		day=${ymd:8:2}
		res="$DEST/$sta/$year/$year-$month-$day.$sta"
		gipsyres="$res.tdp"
		gipsylog="$res.log"
		if [[ $FORCE == 0 && -s "$gipsyres" ]]; then 
			echo "   file $gipsyres [flinn] already exists..."
		else
			# makes Rinex daily file from raw data (see mkrinex script)
			DIR="$FROM/$sta/$ymd"
			rinex="$tmpdir/rinex"
			#if [ "$(ls -A $DIR)" ]; then
			if [ -d "$DIR" ]; then
				rm -rf $tmpdir/*
				echo "$PROGDIR/mkrinex $DIR $rinex $TEQCOPTIONS -O.mn \"$sta\" -O.mo \"$sta\" $receiver $antenna"
				$PROGDIR/mkrinex $DIR $rinex $TEQCOPTIONS -O.mn \"$sta\" -O.mo \"$sta\" $receiver $antenna

				# makes GipsyX processing
				tdp="$tmpdir/smoothFinal.tdp"
				cd $tmpdir

				# makes a loop for different orbits precision: from Final to Ultra
				for orbit in "${ORBITS[@]}" ; do
					if [[ $orbit == ${ORBITS[1]} && -s $gipsyres.$orbit ]]; then
						echo "   file $gipsyres [$orbit] already exists..."
						break
					else
						cmd="gd2e.py -rnxFile $rinex -GNSSproducts $orbit $GIPSYOPTIONS > gd2e.log 2>&1"
						echo "   $cmd"
						eval $cmd
						rc=$?
						if [[ $rc == 0 && -s $tdp ]]; then
							mkdir -p "$DEST/$sta/$year"
							rm -f $gipsyres.*
							grep ".State.Pos.[XYZ]" $tdp | tail -n3 > $gipsyres
							echo "   ==> $gipsyres written."
							if [ "$orbit" != "flinn" ]; then
								mv $gipsyres $gipsyres.$orbit
							fi 
							break
						else
							echo "   ** WARNING: Problem to process gd2e... May be orbit $orbit not yet available?"
						fi
					fi
				done
				mv -f gd2e.log $gipsylog
				gzip -f $gipsylog
			else
				echo "   $DIR is empty (no data to process)."
			fi
		fi
	done
done

echo "*************************************"

rm -rf $tmpdir
