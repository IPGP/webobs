#!/bin/bash
P=`dirname $0`
. $P/dutils.sh

# can be run for fresh installation or within a legacy Webobs migration
# current directory (pwd) MUST be the target webob's CONF/ directory

echo "Creating/populating metadata tables ..."
sqlite3 WEBOBSMETA.db <<EOF
BEGIN TRANSACTION;

drop table if exists producer;
create table producer (
    IDENTIFIER text NOT NULL, 
    NAME text NOT NULL, 
    TITLE text NOT NULL, 
    DESCRIPTION text NOT NULL, 
    OBJECTIVE text NOT NULL, 
    MEASUREDVARIABLES text NOT NULL, 
    EMAIL text NOT NULL, 
    CONTACTS text NOT NULL, 
    FUNDERS text NOT NULL, 
    ONLINERESOURCE text NOT NULL, 
    PRIMARY KEY (IDENTIFIER), 
    FOREIGN KEY (CONTACTS) REFERENCES contact(IDENTIFIER), 
    FOREIGN KEY (FUNDERS) REFERENCES organisations(IDENTIFIER)
    );
    
drop table if exists contacts;
create table contacts ( 
    IDENTIFIER text NOT NULL, 
    EMAIL text NOT NULL, 
    PRIMARY KEY(IDENTIFIER)
    );
    
drop table if exists organisations;
create table organisations (
    IDENTIFIER text NOT NULL, 
    NAME text NOT NULL, 
    ISO3166 text DEFAULT 'fr', 
    PRIMARY KEY(IDENTIFIER)
    );
    
drop table if exists datasets;
create table datasets (
    IDENTIFIER text NOT NULL, 
    TITLE text NOT NULL, 
    DESCRIPTION text NOT NULL, 
    SUBJECT text NOT NULL, 
    CREATOR text NOT NULL, 
    SPATIALCOVERAGE text NOT NULL, 
    PROVENANCE text NOT NULL, 
    PRIMARY KEY(IDENTIFIER), 
    FOREIGN KEY (CREATOR) REFERENCES contacts(IDENTIFIER)
    );
    
drop table if exists observations;
create table observations (
    IDENTIFIER text NOT NULL, 
    PROCESSINGLEVEL text NOT NULL,
    DATATYPE text DEFAULT 'Numeric',
    TEMPORALEXTENT text NOT NULL,
    TIMESERIES text DEFAULT 'TRUE',
    OBSERVEDPROPERTY text NOT NULL, 
    STATIONNAME text NOT NULL, 
    DATASET text NOT NULL, 
    DATAFILENAME text NOT NULL, 
    PRIMARY KEY(IDENTIFIER), 
    FOREIGN KEY (OBSERVEDPROPERTY) REFERENCES observed_properties(IDENTIFIER), 
    FOREIGN KEY (STATIONNAME) REFERENCES sampling_features(IDENTIFIER), 
    FOREIGN KEY (DATASET) REFERENCES datasets(IDENTIFIER)
    );
    
drop table if exists observed_properties;
create table observed_properties (
    IDENTIFIER text NOT NULL, 
    NAME text NOT NULL, 
    UNIT text NOT NULL, 
    THEIACATEGORIES text NOT NULL, 
    PRIMARY KEY(IDENTIFIER)
 );
    
drop table if exists sampling_features;
create table sampling_features (
    IDENTIFIER text NOT NULL, 
    NAME text NOT NULL, 
    GEOMETRY text NOT NULL, 
    PRIMARY KEY(IDENTIFIER)
    );
    
drop table if exists grids2producers;
create table grids2producers (
    TYPE text NOT NULL, 
    NAME text NOT NULL, 
    PID text NOT NULL, 
    FOREIGN KEY (PID) REFERENCES producer(IDENTIFIER)
    );
    
drop table if exists typeOrganisation;
create table typeOrganisation (TYPE text NOT NULL, NAME text NOT NULL);
INSERT INTO "typeOrganisation" VALUES('FrenchResearchInstitutes:', 'French research institutes');
INSERT INTO "typeOrganisation" VALUES('FederativeStructure:','Federative structure');
INSERT INTO "typeOrganisation" VALUES('ResearchUnit:','Research unit');
INSERT INTO "typeOrganisation" VALUES('Other:','Other');
INSERT INTO "typeOrganisation" VALUES('OtherUniversitiesAndSchools:','Other universities and schools');
INSERT INTO "typeOrganisation" VALUES('ResearchProgram:','Research program');
INSERT INTO "typeOrganisation" VALUES('FrenchUniversitiesAndSchools:','French universities and schools');
INSERT INTO "typeOrganisation" VALUES('OtherResearchInstitutes:','Other research institutes');

drop table if exists typeResource;
create table typeResource (TYPE text NOT NULL, NAME text NOT NULL);
INSERT INTO "typeResource" VALUES('http:info@', 'Info');
INSERT INTO "typeResource" VALUES('http:download@', 'Download');
INSERT INTO "typeResource" VALUES('http:doi@', 'DOI');
INSERT INTO "typeResource" VALUES('http:webservice@', 'Webservice');

COMMIT;
EOF

echo "Done."
exit 0
