#!/bin/bash
# Ojective: migration of existing former FORM (.DAT text file based) associated to
# PROCS, to GENFORM (.db based) associated to NODES (new grid FORM structure).
#
# Author: François Beauducel
# Created: 2024-04-21
# Updated: 2024-12-27


if [ -z "$1" ]; then
	echo
	echo "$0 migrates former FORM to new GENFORM"
	echo "Usage: $0 WOROOT"
	echo
	exit 1
fi

# -----------------------------------------------------------------------------
if [[ $(id -u) != 0 ]]; then
	echo 'Need to have root privileges. Bye'
#	exit 64
fi

WOROOT=$1
DBF=$WOROOT/DATA/DB/WEBOBSFORMS.db
TMP=/tmp/webobs_genform_migration


P=`dirname $0`
if ! [[ -e $P/../dutils.sh ]]; then
	echo 'Missing dutils.sh. Bye.'
	exit 64
fi
. $P/../dutils.sh

wousr=$(stat -f '%Su' $WOROOT/CONF/GRIDS2NODES)
wogrp=$(stat -f '%Sg' $WOROOT/CONF/GRIDS2NODES)


# =============================================================================
# make a loop on all PROC associated to FORM
for p in $(ls $WOROOT/CONF/GRIDS2FORMS/); do
 
	# -----------------------------------------------------------------------------
	# get the names of proc, form and nodes
	proc=$(echo $p | cut -d '.' -f 2)
	form=$(echo $p | cut -d '.' -f 3)
	nodes=()
	for n in $(ls -d CONF/GRIDS2NODES/PROC.$proc*); do
		nodes+=($(echo $n | cut -d '.' -f 3))
	done

	# will process only known forms...
	if [[ $form =~ ^DISTANCE\|BOJAP\|EAUX\|EXTENSO\|FISSURO\|GAZ\|RIVERS\|SOILSOLUTIONS$ ]]; then

		echo ">> migrating PROC '$proc'..."
		echo " FORM = $form"
		echo -n " NODES ="
		printf " %s" ${nodes[@]}
		echo ""

		# -----------------------------------------------------------------------------
		# make the form conf
		if [ $form = $conf ]; then
			echo " mv $WOROOT/CONF/FORMS/$form $WOROOT/CONF/FORMS/${form}_LEG"
			dconf0="$WOROOT/CONF/FORMS/${form}_LEG"
		else
			dconf0="$WOROOT/CONF/FORMS/$form"
		fi
		dconf1="$WOROOT/CONF/FORMS/$proc"

		echo " mkdir $dconf1"

		# database table (lowercase)
		DBT=${proc,,}

		# data filename
		DAT=$(grep ^FILE_NAME $dconf0/$form.conf | cut -d '|' -f 2

		echo  -n "Creating/populating $DBT table with former $DAT..."

		case $form in
			"EAUX")
				NBI=24

				;;

		esac

		echo " chown -R $wousr:$wogrp $WOROOT/CONF/FORMS/$proc"

		# -----------------------------------------------------------------------------
		# make the new links form2nodes
		for n in ${nodes[@]}; do
			echo " ln -s $WOROOT/DATA/NODES/$n $WOROOT/CONF/GRIDS2NODES/FORM.$proc.$n"
		done
		echo " chown $wousr:$wogrp $WOROOT/CONF/GRIDS2NODES/FORM.$proc.*"
	fi

done

exit 1

# -----------------------------------------------------------------------------

# === EAUX --> modèle WATERS_fr



echo "BEGIN TRANSACTION;" > $TMP
echo "DROP TABLE if exists $DBT;" >> $TMP
printf "CREATE TABLE $DBT (id integer PRIMARY KEY AUTOINCREMENT, trash boolean DEFAULT FALSE, quality integer, node text NOT NULL" >> $TMP
printf ", edate datetime, edate_min datetime, sdate datetime NOT NULL, sdate_min datetime, operators text NOT NULL" >> $TMP
printf ", comment text, tsupd text NOT NULL, userupd text NOT NULL" >> $TMP
for i in $(seq 1 $NBI); do printf ", input%02d text" $i >> $TMP; done
echo ");" >> $TMP
tac $DAT | iconv -f ISO-8859-1 -t UTF-8 | gawk -F'|' -v t="$DBT" -v n="$NBI" ' { if ($1 != "ID") { \
	bin = ($1<0) ? 1:0; \
	printf "INSERT INTO "t"(trash,node,edate,edate_min,sdate,sdate_min,operators,comment,tsupd,userupd"; \
	for (i=1;i<=n;i++) printf ",input%02d",i; \
	printf ") ";\
	printf "VALUES(\""bin"\",\""$4"\",\""$2" "$3"\",\""$2" "$3"\",\"\",\"\",\"!\""; \
	gsub(/"/,"\"\"", $28); \
	gsub(/\045/,"\045\045", $28); \
	printf ",\""$28" "$29"\""; \
	if ($29 ~ /^\[.*\] /) {
		nn = split($29,vv,/\] \[/);
		split(vv[1],v," ");
		gsub(/\]/, "", v[2]); \
		printf ",\""v[1]"\",\""v[2]"\"" \
	} else { printf ",\"\",\"\"" }; \
	for (i=5;i<n+5;i++) printf ",\""$i"\""; \
	print ");" }}' >> $TMP 
echo "COMMIT;" >> $TMP

cat $TMP | sqlite3 $DBF && rm -f $TMP
echo " Done."


